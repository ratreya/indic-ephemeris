/*
* IndicEphemeris is a fluent Swift interface to Swiss Ephemeris with Indic Astrology specific extensions.
* Copyright (C) 2020 Ranganath Atreya
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*/

import Foundation

/// This class provides default config values that the client can override, typically using `UserDefaults` and pass an instance into `IndicEphemeris`.
open class Config {
    /**
     Empty public init to enable clients to call super.init()
     */
    public init() {}
    
    /**
     The level at which to NSLog log messages generated by IndicEphemeris.
     
     - Important: This configuration only holds within the same thread in which `IndicEphemeris` was initialized.
     */
    open var logLevel: Logger.Level { .warning }
    
    /**
     - Important: This is a global setting. Passing a different value to one instance will affect all instances of `IndicEphemeric`.
     */
    open var ayanamsha: Ayanamsha { .Lahiri }
    
    /**
     - Important: This is a global setting. Passing a different value to one instance will affect all instances of `IndicEphemeric`.
     */
    open var dataPath: String { Bundle(for: IndicEphemeris.self).bundleURL.appendingPathComponent("Resources", isDirectory: true).appendingPathComponent("EphemerisData", isDirectory: true).path }
    
    /**
     The depth in `DashaType` up to which sub-Dashas are desired.
     */
    open var maxDashaDepth: DashaType { .Pratyantardasha }
    
    open var transitResolution: Calendar.Component { .second }
    
    open var transitConcurrency: Int { 10 }
}
