/*
* IndicEphemeris is a fluent Swift interface to Swiss Ephemeris with Indic Astrology specific extensions.
* Copyright (C) 2020 Ranganath Atreya
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*/

import Foundation

/**
 Planets, especially outer planets have a peculiar retrograde motion where it sometimes briefly reverses course at the fringes of its retrograde period. This enum speficied various schemes to deal with these fragments.
 - `strict`: treat every contiguous interval of negative speed as a separate retrograde interval.
 - `covering`: merge fringe retrogrates into a maximal covering interval. This is the default.
 - `longest`: ignore the fringe retrogrades and just return the longest contiguous segment.
 */
public enum FringePolicy: Int {
    case strict = 0, covering, largest
}

/// This class provides default config values that the client can override, typically using `UserDefaults` and pass an instance into `IndicEphemeris`.
open class Config {
    /**
     Empty public init to enable clients to call super.init()
     */
    public init() {}
    
    /**
     The level at which to NSLog log messages generated by IndicEphemeris.
     */
    open var logLevel: Logger.Level { .debug }
    
    open var ayanamsha: Ayanamsha { .Lahiri }
    
    open var dataPath: String { Bundle(for: IndicEphemeris.self).bundleURL.appendingPathComponent("Resources", isDirectory: true).appendingPathComponent("EphemerisData", isDirectory: true).path }
    
    /**
     The depth in `DashaType` up to which sub-Dashas are desired.
     */
    open var maxDashaDepth: DashaType { .Pratyantardasha }
    
    /**
     The edges of a transit returned from `TransitCalculator` will be refined to the specified resolution.
     Valid resolutions are `.year`, `.month`, `.day`, `.hour`, `.minute` and `.second`.
     */
    open var transitResolution: Calendar.Component { .second }
    
    /**
     Number of concurrent calculations to execute in `IndicEphemeris.mapReduce`.
     */
    open var concurrency: Int { 16 }
    
    /**
     Number of positions beyond which to parallelize.
     */
    open var concurrencyThreshold: Int { 1000 }
    
    open var retrogradeDefinition: FringePolicy { .covering }
    
    open var transitDefinition: FringePolicy { .covering }
}
